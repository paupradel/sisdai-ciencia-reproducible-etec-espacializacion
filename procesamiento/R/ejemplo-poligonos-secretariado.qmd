---
title: "Generación de capas"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---
# Espacialización de datos a nivel municipal utilizando archivos en formato `.gpkg` como referencia
Este ejemplo es para agregar atributos geográficos a los datos del ["Secretariado Ejecutivo del Sistema Nacional de Seguridad Pública"](https://www.gob.mx/sesnsp). En particular, vamos a utilizar los datos de carpetas de investigación del fuero común abiertas a nivel municipal que se pueden encontrar [aquí](https://www.gob.mx/sesnsp/acciones-y-programas/incidencia-delictiva-del-fuero-comun-nueva-metodologia?state=published). Desde este sitio se puede descargar una carpeta con todos los datos acumulados desde el año 2015 hasta la última fecha de actualización. Para correr este código, por favor descarga el archivo zip y extrae los archivos para poder utilizar el archivo `*.csv`.  

Adicionalmente, para los atributos geográficos de los estados y municipios, vamos a utilizar capas geográficas en formato geopaquete descargadas desde el [portal de Gema](https://gema.conahcyt.mx/).

## Carga de paquetes
```{r, include=FALSE}
library(dplyr)
library(tidyr)
library(sf)
library(ggplot2)
library(janitor)
library(stringr)
library(here)
```

## Carga de datos

```{r}
# Carga de datos del Secretariado Ejecutivo. No olvides modificar el nombre del archivo que hayas descargado.
secretariado_municipal <- 
    read.csv(here("datos","datos-originales","Municipal-Delitos-2015-2024_sep2024", "Municipal-Delitos-2015-2024_sep2024.csv"),
    encoding = "latin1")

# Carga de capas con informacion geogáfica.
municipal <- st_read(here("datos", "datos-auxiliares", "gref_division_municipal_23_mun_a.gpkg"))

```

## Exploración inicial de datos
Lo siguiente es solo para tener una idea de qué información incluye este conjunto de datos
```{r}
glimpse(secretariado_municipal) # Vista general

secretariado_municipal <- # limpiar nombres
    secretariado_municipal |>
    clean_names()

unique(secretariado_municipal$ano) #revisar anios
sort(unique(secretariado_municipal$bien_juridico_afectado))

# Exploración de delitos
secretariado_municipal |>
    select(bien_juridico_afectado, tipo_de_delito, subtipo_de_delito) |>
    distinct() |>
    View()

```  

Podemos ver que los datos vienen organizados de forma que se indica cuántas carpetas de investigación se abrieron en cada municipio, en cada año, en cada uno de los meses. Es importante tomar en cuenta que este conjunto de datos se actualiza mensualmente, por lo que al momento en que estamos generando este ejemplo (octubre 2024) no contamos con datos completos del año en curso, por lo que no los vamos a incluir.

En este ejemplo vamos a utilizar únicamente información de carpetas de investigación abiertas por feminicidio y agruparemos la información por año. Como parte del proceso de transformación, es importante revisar la completitud y calidad de los datos. 

```{r}
feminicidio <-
  secretariado_municipal |> 
  filter(tipo_de_delito == "Feminicidio" & ano < max(ano)) |>
  select(-c(bien_juridico_afectado, tipo_de_delito, 
            subtipo_de_delito, modalidad))
  
rm(secretariado_municipal); gc() #limpiar espacio en memoria

# Revisión de valores faltantes
sum(is.na(feminicidio)) # total de campos con valor NA 

```

## Exploración de capa de información geográfica
Utilizar `sf` permite explorar y manipular los datos geográficos de la misma forma que interactuamos con datos tabulares. La diferencia está en que además incluye por lo menos una variable donde se almacenan los atributos geográficos como geometría o proyecciones.
```{r}
glimpse(municipal)
``` 

En este caso, tenemos información acerca de `{r} nrow(municipal)` municipios y su geometría está almacenada en la variable `geom`. Según los estándares de Gema, la variable que combina la información de la clave de la entidad y del municipio está almacenada como campo de texto y se llama `cvegeomun`. Por esto, en el siguiente paso vamos a homologar a ese formato para unir los dos conjuntos de datos.  

## Transformación de datos
El siguiente paso consiste en generar y modificar variables y agrupar los datos por año
```{r}  
feminicidio <- 
    feminicidio |>
    rename("cvegeomun" = cve_municipio)  |>
    mutate(cvegeomun = as.character(cvegeomun),
         cvegeomun = str_pad(cvegeomun, pad = "0", width = 5)) |> 
    pivot_longer(-c(ano, clave_ent, entidad, cvegeomun, municipio), 
               names_to = "mes") |> 
    group_by(ano, cvegeomun) |> #agrupacion por anio y municipio
    summarise(ci_anuales = sum(value),
              .groups = "drop")  |>
    mutate(g_id = row_number())

head(feminicidio)
```  

## Espacialización
En este caso, como tenemos variables homologadas para unir el conjunto de datos transformado con el conjunto de datos geográfico, únicamente es necesario utilizar una función de tipo `join`. 
```{r}
feminicidio_espacial <- 
  municipal |>
  select(-g_id) |> #para solo conservar el identificador del conjunto final
  left_join(feminicidio)   

glimpse(feminicidio_espacial)

```

Visualicemos la capa que acabamos de crear. Es muy importante que para tus ejemplos utilices las capas geográficas correspondientes con la temporalidad de tus datos.

```{r}
ggplot(feminicidio_espacial) +
  facet_wrap(~ano) +
  geom_sf(aes(geometry = geom, fill = ci_anuales),
          linewidth = 0.05) +
  scale_fill_gradient(low = "white", high = "#ff4f4f") +
  theme_void()

``` 

Finalmente guardamos la capa utilizando la nomenclatura establecida en el proceso ETEC.
```{r}
#write_sf(feminicidio_espacial, "datos/datos-procesados/sehu_secfemin_15_23_mun_a.gpkg")
```
