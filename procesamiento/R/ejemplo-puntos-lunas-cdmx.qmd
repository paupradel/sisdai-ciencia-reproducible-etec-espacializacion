---
title: "Generación de capas"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---
# Espacialiación de coordenadas a puntos georreferenciados
En este ejemplo mostramos cómo tranformar coordenadas almacenadas como variables en archivos de texto (csv, txt, tsv), o archivos en formato excel (xlsx), en capas de información geográfica.  

Para esto, vamos a utilizar datos acerca de la ubicacación de las LUNAS de la Secretaría de las Mujeres de la Ciudad de México, donde se brinda la atención a mujeres en situación de violencia. Estos datos fueron publicados en el [portal de datos abiertos](https://datos.cdmx.gob.mx/) de la Ciudad de México. Puedes descargarlos desde [este enlace](https://datos.cdmx.gob.mx/dataset/lunas) o bien leerlos diréctamente desde el código como haremos más adelante.  

Adicionalmente, para fines de visualización, vamos a utilizar la capa geográfica de municipios en formato geopaquete descargadas desde el [portal de Gema](gema.conahcyt.mx). 

## Carga de paquetes
```{r}
library(dplyr)
library(tidyr)
library(sf)
library(ggplot2)
library(readr)
library(here)
```

## Carga de datos
```{r}
# lectura de datos desde el portal de datos abiertos cdmx

lunas <- read_csv("https://datos.cdmx.gob.mx/dataset/5a8373a7-cf04-4146-b5cd-b727f0264df2/resource/f7e1be67-ae1b-43e7-aa31-057a6560abd1/download/lunas-cdmx.csv")

```


```{r}
# Datos geogaficos
municipal <- st_read(here("datos","datos-auxiliares", "gref_division_municipal_23_mun_a.gpkg"))

```

## Exploración inicial de datos
Lo siguiente es solo para tener una idea de qué información incluye este conjunto de datos
```{r}
dim(lunas) # dimensiones de los datos
glimpse(lunas) # Vista general

```  

Podemos ver que los datos vienen organizados de forma hay un registro por cada LUNA, incluyendo tanto su ubicación como su georreferencia, datos de contacto, horarios y servicios ofrecidos.

El siguiente paso es evaluar la completitud de los datos
```{r}
# complete cases para identificar cuantas y cuales filas (registros) tienen informacion en todas las columnas
sum(complete.cases(lunas)) 
```  
Hay únicamente `{r} sum(complete.cases(lunas))` con datos en todas las columnas. Sin embargo, en este caso, nos interesan únicamente el nombre del centro de atención y la información de las coordenadas.

```{r}
sum(complete.cases(lunas[ , c("nombre_luna", "latitud", "longitud")])) 
```

Una vez que validamos que tenemos toda la información que necesitamos, podemos pasar a la etapa de espacialización.

## Transformación
En este caso, las coordenadas ya se encuentran en formato decimal, solo es necesario cambiar el nombre de las variables para cumplir con los estándares del proceso ETEC.

```{r}
lunas <- 
  lunas |> 
  rename(
    "x_long" = longitud,
    "y_lat" = latitud
  )
```


## Espacialización de puntos
Para espacializar los datos, vamos a utilzar la función `st_as_sf` que permite convertir diferentes tipos de datos en obejetos espaciales.
Lo que necesitamos es indicar qué datos queremos espacializar; adicionalmente, vamos a utilizar el argumeto `remove = FALSE` para conservar las coordenas originalea además de crear la variable espacial, la cual nombraremos `geom`.

```{r}
lunas_espacial <- 
        st_as_sf(lunas, coords = c("x_long", "y_lat"), 
               crs = 4326, agr = "constant", remove = FALSE,
               sf_column_name = "geom")

glimpse(lunas_espacial)
```  


### Exploración de capa de información de municipios
Utilizar `sf` permite explorar y manipular los datos geográficos de la misma forma que interactuamos con datos tabulares. La diferencia está en que además incluye por lo menos una variable donde se almacena la información geográfica.
```{r}
glimpse(municipal)
unique(municipal$nom_ent)
``` 
Para fines de visualización, vamos a utilizar la capa de municipios, pero filtrando únicamente lo correspondiente a Ciudad de México.

```{r}
alcaldias_cdmx <- 
  municipal |> 
  filter(nom_ent == "Ciudad de México")

dim(alcaldias_cdmx)  
```



Visualicemos la capa que acabamos de crear
```{r}
ggplot() +
  geom_sf(data = alcaldias_cdmx, 
          aes(geometry = geom),
          linewidth = 0.2) +
  geom_sf(data = lunas_espacial,
          aes(geometry = geom), 
          color = "#7b2cbf", size = .8) +
  labs(
    title = "LUNAS en la Ciudad de México"
  ) +
  theme_void()

``` 

Finalmente guardamos la capa utilizando la nomenclatura establecida en el proceso ETEC.
```{r}
# write_sf(lunas_espacial, "datos/datos-procesados/sehu_lunascdmx_180123_xy_p.gpkg")

```
